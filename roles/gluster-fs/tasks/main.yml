- name: umount glusterFS disk
  shell: "umount /data/glusterfs/myvol1/brick1"
  become: yes
  ignore_errors: yes

- name: Install gluster-server
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - glusterfs-server
    - xfsprogs
  become: yes

- name: sudo mkfs.xfs -f -L myvol-brick1 /dev/sda1
  filesystem:
    fstype: xfs
    dev: /dev/sda1
    opts: -L myvol-brick1
    force: yes
  become: yes

- name: Create Directory
  file:
    state: directory
    path: /data/glusterfs/myvol1/brick1/
  become: yes

- name: Recuperar PARTUUID del dispositivo sda1
  shell: blkid -o export /dev/sda1|grep PARTUUID
  register: sda1_partition_uuid
  become: yes

- name: Debug Ver PARTUUID
  debug:
    msg: "{{ sda1_partition_uuid.stdout }}"

- name:  Actualizar /etc/fstab
  lineinfile:
    path: /etc/fstab
    regexp: "^{{ sda1_partition_uuid.stdout }}"
    line: "{{ sda1_partition_uuid.stdout }} /data/glusterfs/myvol1/brick1 xfs defaults,noatime 1 2\n"
  become: yes

- name: mount glusterFS disk
  shell: "sudo mount /data/glusterfs/myvol1/brick1"
  become: yes



- name: Make sure glusterd.service is started
  systemd:
    state: started
    name: glusterd
    daemon_reload: yes
    enabled: yes
  become: yes

- name: probing peers
  become: yes
  debug:
    msg: "sudo gluster peer probe {{item}} "
#  shell: "sudo gluster peer probe {{item}} "
#  when: hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2] == groups['raspberrycluster'][0]
  with_items: "{{groups['raspberrycluster']}}"


- name: Template para el sh que crea brick
  template:
    src:  create_volume_gluster.sh
    dest: /tmp/create_volume_gluster.sh
  when: hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2] == groups['raspberrycluster'][0]
  become: yes

#- name: Creamos Brick
#  shell: bash /tmp/create_volume_gluster.sh
#  when: hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2] == groups['raspberrycluster'][0]
#  become: yes
#  ignore_errors: yes
